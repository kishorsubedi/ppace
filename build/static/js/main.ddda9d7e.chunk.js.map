{"version":3,"sources":["assets/ppace.png","serviceWorker.js","components/mainbar.jsx","components/login.jsx","components/topbar.jsx","components/App.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","Mainbar","props","state","postTitle","eventDate","postContent","deletePostId","data","clear","setState","fetch","then","res","json","TextField","value","this","onChange","e","target","id","label","style","margin","placeholder","helperText","required","InputLabelProps","shrink","newPost","username","addPostFrontend","addPostBackend","splice","result","characters","charactersLength","length","i","charAt","Math","floor","random","generateRandomHash","requestOptions","method","headers","body","JSON","stringify","response","a","catch","error","console","ifTrue","className","type","onClick","addPost","titleBox","EventDateBox","fullWidth","multiline","ifNotTrue","admin","PostId","postId","deletePostFrontend","deletePostBackend","el","deletePost","deletePostBox","CreatorName","PostTitle","EventDate","PostContent","ctr","map","key","PostBox","log","Fragment","createPostBox","allOtherPostsBox","Component","Login","name","handleChange","password","logInButton","event","handleLogout","handleLogin","setAdminState","parse","Topbar","announcement","styles","fontSize","fontWeight","color","display","postsStyles","src","ppace","height","width","marginTop","marginLeft","App","isAdmin","String","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ddda9d7e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/ppace.3266febc.png\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Component } from 'react';\nimport TextField from '@material-ui/core/TextField';\n\nclass Mainbar extends Component {\n\n    constructor(props) {\n        super(props);\n    }\n\n    state = {\n        postTitle: '',\n        eventDate: '',\n        postContent: '',\n        deletePostId: '',\n        data: []\n    }\n\n    componentDidMount() {\n        fetch(`https://ppace.azurewebsites.net/posts`)\n          .then(res => res.json())\n          .then(json => this.setState({ data: json }));\n    }\n\n    clear = () =>{\n        // return the state to initial\n        this.setState({\n            postTitle: '',\n            eventDate: '',\n            postContent: ''\n        })\n      }\n\n    titleBox(){\n        return(<TextField\n            value={this.state.postTitle}\n            onChange={(e)=>{this.setState({postTitle: e.target.value})}}\n            id=\"titleStandard\"\n            label=\"\"\n            style={{ margin: 8 }}\n            placeholder=\"Post Title\"\n            helperText=\"\"\n            required\n            margin=\"normal\"\n            InputLabelProps={{\n                shrink: true,\n            }}\n    />);\n    }\n\n    EventDateBox(){\n        return(<TextField\n            value={this.state.eventDate}\n            onChange={(e)=>{this.setState({eventDate: e.target.value})}}\n            id=\"eventdateStandard\"\n            label=\"\"\n            style={{ margin: 8 }}\n            placeholder=\"Event Date\"\n            helperText=\"\"\n            required\n            margin=\"normal\"\n            InputLabelProps={{\n                shrink: true,\n            }}\n    />);\n    }\n\n    addPost(){\n        if(!this.state.postTitle || !this.state.postContent || !this.state.eventDate){\n            return false;\n        }\n        var newPost = {\"PostTitle\": this.state.postTitle, \"EventDate\": this.state.eventDate, \"PostContent\": this.state.postContent, \"CreatorName\": this.props.username};\n        this.addPostFrontend(newPost);\n        this.addPostBackend(newPost);\n    }\n\n    addPostFrontend(newPost){\n        // console.log(\"Adding post to div\");\n        \n        this.state.data.splice(0,0,newPost); //adding newlycreatedPost in state.data\n\n        //clearing textfield\n        this.setState({\n            postTitle: '',\n            eventDate: '',\n            postContent: ''\n        });\n    }\n\n    generateRandomHash() {\n        var length = 15;\n        var result           = '';\n        var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n        var charactersLength = characters.length;\n        for ( var i = 0; i < length; i++ ) {\n           result += characters.charAt(Math.floor(Math.random() * charactersLength));\n        }\n        return result;\n     }\n\n    addPostBackend(newPost){\n        newPost[\"PostId\"]  = this.generateRandomHash();\n        // console.log(JSON.stringify(newPost));\n\n        const requestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(newPost)\n        };\n        fetch(`https://ppace.azurewebsites.net/posts`, requestOptions)\n            .then(async response => {\n                const data = await response;\n            })\n            .catch(error => {\n                // this.setState({ errorMessage: error.toString() });\n                console.error('There was an error!', error);\n            });\n\n    }\n\n    createPostBox(){\n        var ifTrue = \n        <form>\n            <div>\n                <div className=\"PostsDelete PostsCreate\">\n                                <input type=\"button\" onClick={() => this.addPost()} value=\"Create\" className=\"PostsCreate\"/> \n                </div>\n                <div className=\"Posts\">\n                    <div className=\"CreatorNameClass\"> By: {this.props.username} </div> \n                    <div className=\"PostTitleClass\">  \n                        Title:\n                            <div className=\"InputPostTitleEventDateClass\">\n                                {this.titleBox()}\n                            </div>\n                    </div> \n                    <div className=\"PostTitleClass EventDateClass\"> \n                        Event Date: \n                            <div className=\"InputPostTitleEventDateClass\">\n                                    {this.EventDateBox()}\n                            </div>\n                    </div>  \n                    <br></br>\n                    <div className=\"InputPostContentClass\"> \n                        <TextField\n                            value={this.state.postContent}\n                            onChange={(e)=>{this.setState({postContent: e.target.value})}}\n                            id=\"standard-full-width\"\n                            label=\"\"\n                            style={{ margin: 8 }}\n                            placeholder=\"Post Content\"\n                            helperText=\"\"\n                            fullWidth\n                            multiline\n                            margin=\"normal\"\n                            required\n                            InputLabelProps={{\n                                shrink: true,\n                            }}\n                        />\n                    </div>\n                </div>\n            </div>\n        </form>;\n\n        var ifNotTrue = <div></div>;\n        if(this.props.admin){\n            return ifTrue;\n        }\n        return (ifNotTrue);\n    }\n\n    deletePostBackend(PostId){\n        var postId = {PostId: PostId};\n        //remove from backend\n        const requestOptions = {\n            method: 'DELETE',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(postId)\n        };\n        fetch(`https://ppace.azurewebsites.net/posts`, requestOptions)\n            .then(async response => {\n                const data = await response;\n            })\n            .catch(error => {\n                // this.setState({ errorMessage: error.toString() });\n                console.error('There was an error!', error);\n            });\n    }\n\n    deletePostFrontend(PostId){\n        // console.log(\"this.state.data\");\n        this.setState({deletePostId: PostId});\n    }\n\n    deletePost(PostId){\n        // console.log(\"deleting\", PostId);\n        this.deletePostFrontend(PostId);\n        this.deletePostBackend(PostId);\n    }\n\n    deletePostBox(el){\n        if(this.props.admin){\n            return(<div className=\"PostsDelete\"><input type=\"button\" onClick={() => this.deletePost(el.PostId)} value=\"Delete\" className=\"PostsDelete\"/> </div>);\n        }\n        return (<div></div>);\n    }\n\n    PostBox(el){\n        if(this.state.deletePostId != el.PostId){\n            return (\n                <div>\n                    {this.deletePostBox(el)}\n                    <div className=\"Posts\">\n                        <div className=\"CreatorNameClass\"> By: {el.CreatorName} </div> \n                        <div className=\"PostTitleClass\">  Title: {el.PostTitle} </div> \n                        <div className=\"EventDateClass\"> Event Date: {el.EventDate}</div>  \n                        <br></br>\n                        <div className=\"PostContentClass\"> {el.PostContent} </div>\n                    </div> \n                </div>\n            );\n        }\n        return (<div></div>);\n    }\n\n    allOtherPostsBox(){\n        var ctr = 0;\n        return(<div> \n            {this.state.data.map(el => (\n                    <div key={ctr++}>\n                        {this.PostBox(el)}\n                    </div>\n                           \n                ))}  \n        </div>)\n    }\n\n    render() { \n        console.log(this.props.admin);\n        return (<React.Fragment>\n            <div className=\"mainbar\">\n                {this.createPostBox()}            \n                {this.allOtherPostsBox()}         \n            </div>\n        </React.Fragment> );\n    }\n\n    // get() {\n    //     console.log(\"Get() button clicked\");\n    //     //make backend request here\n    //     const Http = new XMLHttpRequest();\n    //     const url='https://ppace.azurewebsites.net/posts';\n    //     Http.open(\"GET\", url);\n    //     Http.send();\n    //     var response;\n    //     Http.onreadystatechange = (e) => {\n    //         if (Http.readyState === 4 && Http.status === 200)\n    //         {\n    //             if (Http.responseText)\n    //             {\n    //                     //put your code here \n    //                     response = Http.responseText\n    //                     var obj = JSON.parse(response);\n    //                     console.log(obj);\n    //             }\n    //         }         \n    //     }\n    // }\n}\n \nexport default Mainbar;\n","import React, { Component } from \"react\";\nimport Mainbar from \"./mainbar\";\nimport '../index.css';\n\nexport default class Login extends Component {\n\n    render() {\n        console.log(this.props.admin);\n        return (\n            <React.Fragment>\n\n                <div className=\"form-group\">\n                    <input type=\"username\" name=\"username\" value={this.props.username} className=\"form-control\" placeholder=\"Enter email\" onChange={this.props.handleChange} />\n                </div>\n\n                <div className=\"form-group\">\n                    <input type=\"password\" name=\"password\" value={this.props.password} className=\"form-control\" placeholder=\"Enter password\"  onChange={this.props.handleChange}/>\n                </div>\n\n                {this.logInButton()}\n\n            </React.Fragment>\n        );\n    }\n\n    logInButton(){\n        if(this.props.admin){\n            return(<button type=\"submit\" className=\"logout\" onClick={(event) => this.handleLogout(event)}>Logout</button>);\n        }\n        return(<button type=\"submit\" className=\"btn btn-primary btn-block\" onClick={(event) => this.handleLogin(event)}>Login</button>);\n    }\n\n    handleLogout(){\n        this.props.setAdminState(JSON.parse('false'));\n    }\n    \n    async handleLogin(event){\n        console.log(this.props.username);\n        //console.log(this.state.username);\n        //console.log(this.state.password);\n        fetch(`https://ppace.azurewebsites.net/auth?uid=`+ this.props.username + `&pwd=` + this.props.password)\n          .then(res => res.json())\n          .then(json => this.props.setAdminState(json));\n\n        //send this data to backend, return true or false. set mainbar's variable accordingly\n        //let response = await fetch(url);\n        //let data = await response.json()\n        //console.log(data);\n    }\n}","import React, { Component } from 'react';\nimport ppace from '../assets/ppace.png';\nimport Login from './login';\n\nclass Topbar extends Component {\n    state = { \n        announcement: \"Announcement:   Covid 19 warning: Please stay indoors, and submit this form!\"\n     }\n\n    styles = {fontSize: 20, fontWeight: 'bold', color: 'white', display:'block'};\n\n    postsStyles = {fontSize: 10};\n\n    render() { \n        return (<React.Fragment> \n\n                <div className=\"topBarContainer\">\n                    <div className=\"imgFlex\"> \n                        <img className=\"image\" src={ ppace } style={{height:\"110px\",width:\"200px\",marginTop:\"30px\",marginLeft:\"30px\"}}/>\n                    </div>\n\n                    <div className=\"announcementFlex\">\n                        <p style={this.styles}> PPACE Announcements </p>\n                    </div>\n\n                    <div className=\"loginFlex\">\n                        <div className=\"loginBox\">\n                            <Login admin={this.props.admin} handleChange={this.props.handleChange} setAdminState={this.props.setAdminState} username={this.props.username} password={this.props.password}/>\n                        </div>\n                    </div>\n                </div> \n\n        </React.Fragment> );\n    }\n\n}\n \nexport default Topbar;","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport '../index.css';\nimport * as serviceWorker from '../serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport Topbar from './topbar';\nimport Mainbar from './mainbar';\n\nexport default class App extends Component{\n    state= {username:'',password:'',isAdmin:false}\n\n    handleChange = (e) => {\n        this.setState({ [e.target.name] : e.target.value });\n    }\n\n    setAdminState = (json) => {\n        if(String(json) === \"true\"){ \n            console.log(\"ds\");\n            this.setState({username:'', password: '', isAdmin:true});\n            return;\n        }\n        this.setState({isAdmin:false});\n    }\n\n    render(){\n        return(\n            <React.Fragment> \n                <Topbar admin={this.state.isAdmin} handleChange={this.handleChange} setAdminState={this.setAdminState} username={this.state.username} password={this.state.password}/>\n                <Mainbar admin={this.state.isAdmin} username={this.state.username}/>\n            </React.Fragment>\n            );\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}