{"version":3,"sources":["serviceWorker.js","components/login.jsx","components/topbar.jsx","components/mainbar.jsx","index.js","assets/ppace.png"],"names":["Boolean","window","location","hostname","match","Login","className","type","placeholder","Component","Topbar","state","announcement","styles","fontSize","fontWeight","color","display","postsStyles","Fragment","src","ppace","style","height","width","marginTop","marginLeft","this","Mainbar","names","map","name","textImagePost","listofPeople","onClick","get","console","log","Http","XMLHttpRequest","open","send","onreadystatechange","e","responseText","obj","JSON","parse","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"qKAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,sDChBeC,E,uKAEb,OACI,8BAEI,yBAAKC,UAAU,cACX,2BAAOC,KAAK,QAAQD,UAAU,eAAeE,YAAY,iBAG7D,yBAAKF,UAAU,cACX,2BAAOC,KAAK,WAAWD,UAAU,eAAeE,YAAY,oBAGhE,4BAAQD,KAAK,SAASD,UAAU,6BAAhC,c,GAbmBG,aCmCpBC,E,4MAhCXC,MAAQ,CACJC,aAAc,gF,EAGlBC,OAAS,CAACC,SAAU,GAAIC,WAAY,OAAQC,MAAO,QAASC,QAAQ,S,EAEpEC,YAAc,CAACJ,SAAU,I,uDAGrB,OAAQ,kBAAC,IAAMK,SAAP,KAEA,yBAAKb,UAAU,mBACX,yBAAKA,UAAU,WACX,yBAAKA,UAAU,QAAQc,IAAMC,IAAQC,MAAO,CAACC,OAAO,QAAQC,MAAM,QAAQC,UAAU,OAAOC,WAAW,WAG1G,yBAAKpB,UAAU,oBACX,uBAAGgB,MAAOK,KAAKd,QAAf,0BAGJ,yBAAKP,UAAU,aACX,yBAAKA,UAAU,YACX,kBAAC,EAAD,c,GAvBPG,aC0ENmB,E,4MAzEXjB,MAAQ,CACJkB,MAAQ,CAAC,QAAS,OAAQ,OAAQ,SAAU,U,6DAI5C,OAAO,6BACMF,KAAKhB,MAAMkB,MAAMC,KAAI,SAAAC,GAAI,OACtB,4BACCA,S,+BAOjB,OAAQ,kBAAC,IAAMZ,SAAP,KACJ,yBAAKb,UAAU,WACX,yBAAKA,UAAU,SACVqB,KAAKK,gBAEN,yBAAK1B,UAAU,oBACX,yBAAKA,UAAU,YACX,uDAEKqB,KAAKM,iBAKd,yBAAK3B,UAAU,YACX,6BACKqB,KAAKM,iBAId,yBAAK3B,UAAU,YACX,6BACKqB,KAAKM,uB,sCAWlB,IAAD,OACX,OACA,6BACI,4BAAQC,QAAS,kBAAM,EAAKC,OAAOnB,MAAM,SAAzC,gC,4BAOJoB,QAAQC,IAAI,wBAEZ,IAAMC,EAAO,IAAIC,eAEjBD,EAAKE,KAAK,MADA,yCAEVF,EAAKG,OAELH,EAAKI,mBAAqB,SAACC,GACvBP,QAAQC,IAAIC,EAAKM,cACjB,IAAIC,EAAMC,KAAKC,MAAMT,EAAKM,cAC1BR,QAAQC,IAAIQ,EAAI,S,GAvENpC,aCOtBuC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,OAEFC,SAASC,eAAe,SJqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxB,QAAQwB,MAAMA,EAAMC,a,kBKzI5BC,EAAOC,QAAU,IAA0B,mC","file":"static/js/main.e0f39d90.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Component } from \"react\";\n\nexport default class Login extends Component {\n    render() {\n        return (\n            <form>\n\n                <div className=\"form-group\">\n                    <input type=\"email\" className=\"form-control\" placeholder=\"Enter email\" />\n                </div>\n\n                <div className=\"form-group\">\n                    <input type=\"password\" className=\"form-control\" placeholder=\"Enter password\" />\n                </div>\n\n                <button type=\"submit\" className=\"btn btn-primary btn-block\">Login</button>\n\n            </form>\n        );\n    }\n}","import React, { Component } from 'react';\nimport ppace from '../assets/ppace.png';\nimport Login from './login';\n\nclass Topbar extends Component {\n    state = { \n        announcement: \"Announcement:   Covid 19 warning: Please stay indoors, and submit this form!\"\n     }\n\n    styles = {fontSize: 20, fontWeight: 'bold', color: 'white', display:'block'};\n\n    postsStyles = {fontSize: 10};\n\n    render() { \n        return (<React.Fragment> \n\n                <div className=\"topBarContainer\">\n                    <div className=\"imgFlex\"> \n                        <img className=\"image\" src={ ppace } style={{height:\"110px\",width:\"200px\",marginTop:\"30px\",marginLeft:\"30px\"}}/>\n                    </div>\n\n                    <div className=\"announcementFlex\">\n                        <p style={this.styles}> PPACE Announcements </p>\n                    </div>\n\n                    <div className=\"loginFlex\">\n                        <div className=\"loginBox\">\n                            <Login/>\n                        </div>\n                    </div>\n                </div>\n\n        </React.Fragment> );\n    }\n\n}\n \nexport default Topbar;","import React, { Component } from 'react';\n\nclass Mainbar extends Component {\n\n\n    state = {\n        names : ['James', 'Paul', 'John', 'George', 'Ringo']\n    }\n\n    listofPeople(){\n        return(<div>\n                    {this.state.names.map(name => (\n                        <li>\n                        {name}\n                        </li>\n                    ))}\n                </div>\n            );\n    }\n    render() { \n        return (<React.Fragment>\n            <div className=\"mainbar\">\n                <div className=\"posts\">\n                    {this.textImagePost()}\n\n                    <div className=\"mainBarContainer\">\n                        <div className=\"postFlex\"> \n                            <div>\n                                Posted By:  Event Title\n                                {this.listofPeople()}\n                                \n                            </div>\n                        </div>\n\n                        <div className=\"postFlex\">\n                            <div>\n                                {this.listofPeople()}\n                            </div>\n                        </div>\n\n                        <div className=\"postFlex\">\n                            <div>\n                                {this.listofPeople()}\n                            </div>\n                        </div>\n                    </div>\n\n                </div>\n                \n            </div>\n        </React.Fragment> );\n    }\n\n    textImagePost(){\n        return(\n        <div> \n            <button onClick={() => this.get()} color=\"white\">\n                Get request to Backend!!!\n            </button>\n        </div>);\n    }\n\n    get() {\n        console.log(\"Get() button clicked\");\n        //make backend request here\n        const Http = new XMLHttpRequest();\n        const url='https://ppace.azurewebsites.net/posts';\n        Http.open(\"GET\", url);\n        Http.send();\n\n        Http.onreadystatechange = (e) => {\n            console.log(Http.responseText)\n            var obj = JSON.parse(Http.responseText);\n            console.log(obj[0]);\n        }\n    }\n}\n \nexport default Mainbar;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport Topbar from './components/topbar';\nimport Mainbar from './components/mainbar';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Topbar />\n    <Mainbar />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/ppace.3266febc.png\";"],"sourceRoot":""}